Проблема: Безопасное хранение и передача токенов доступа между микросервисами.

Разделяют два способа хранения токена доступа, а именно хранение в Local Storage и хранение в файлах Cookie.

Local storage - это механизм веб-браузера, который позволяет веб-приложениям хранить данные локально
на устройстве пользователя.
Важно заметить, что Local storage уязвим для атак вида Cross Site Scripting (XSS).

Cross Site Scripting (XSS) - это тип атаки, суть которого в том чтобы внедрить вредоносный JavaScript код
в выдаваемую html-страницу с целью похищения данных пользователя, например токенов доступа.

Различают несколько видов XSS атак:
1. Отражённый XSS (Reflected XSS) - это тип атаки, при которой вредоносный
скрипт передается веб-серверу через параметры URL или формы, а затем возвращается обратно в html-код страницы
без должной фильтрации или экранирования. Если пользователь открывает страницу, то скрипт выполняется
в браузере, что может привести к потере чувствительны данных, например токенов доступа.
2. Хранимая XSS (Stored XSS) - это тип атаки при которой вредоносный скрипт сохраняется на сервере, например
в базе данных и отображается на веб-страницах. Скрипт выполняется в браузерах пользователей,
запрашивающих страницы с вредоносным кодом.
3. XSS в DOM-модели - это тип атаки, такой что вредоносный скрипт модифицирует DOM-дерево веб-страницы,
выполняясь в браузере пользователя. В большинстве случаев, основан на модификации URL-строки.

В свою очередь, файлы Cookie - это небольшой фрагмент данных, отправленный веб-сервером и хранимый на устройстве пользователя.
Хранение токенов доступа в файлах Cookie невелирует потенциальные XSS атаки, так как достаточно установить флаг HttpOnly,
запрещающий JavaScript коду чтение данных из файлов Cookie.
Передача токенов доступа в запросах осуществляется с использованием JavaScript Http методов с флагом { withCredentials: true },
таким образом, если файлы куки существуют, то они передается вместе с запросом, но все еще не могут быть прочитаны используя
JavaScript.
Пример такого запроса следующий
return this.httpClient.post<TokensResponse>(this.baseUrl + this.sessionsRoute, command, {
      withCredentials: true
});

Однако, файлы куки уязвимы для Cross-Site Request Forgery (CSRF) атак.
Cross-Site Request Forgery (CSRF) - представляет собой атаку при которой злоумышленник создает переадресацию
на ресурс, где пользователь имеет активную сессию.
Основной принцип Cross-Site Request Forgery (CSRF) проилюстрирован ниже

** ДИАГРАММА Cross-Site Request Forgery (CSRF) **

Файлы куки имеют параметр SameSite, который определяет будут ли файлы куки отправлены вместе с запросоами,
сделанныим с других ресурсов.
Существует три возможных значения параметра SameSite:
1. None - прямо указывает что на передачу cookie-файлов не накладывается никаких ограничений.
2. Lax - разрешает передачу cookie только безопасными HTTP-методами, которыми, согласно RFC 7231 (ссылка на литературу тут),
являются GET, HEAD, OPTIONS и TRACE.
3. Strict - является самым строгим вариантом безопасности и блокирует отправку cookie с любыми запросами от других
ресурсов. Файлы куки будут передаваться только в пределах того домена, с которого они и были установлены.

Таким образом, значения параметра SameSite такие как Lax и Strict защищают пользователя от CSRF-атаки,
так как блокируют передачу файлов куки на ресурс злоумышленника.