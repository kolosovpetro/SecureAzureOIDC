Проблема: Безопасное хранение токенов доступа и обеспечение взаимодействия с микросервисами.

Рассмотрим несколько способов хранить токен доступа, а именно Local Storage и Cookie.
Local Storage - это механизм веб-браузера, который позволяет веб-приложениям хранить данные локально 
на устройстве пользователя.
Cookie - небольшой фрагмент данных, отправленный веб-сервером и хранимый на компьютере пользователя.

Так же рассмотрим несколько атак, задача который украсть ваши аутентификационные данные или выполнить
какие-либо действия от вашего лица.

(Cross-Site Scripting) XSS - это тип атаки, суть которого в том чтобы внедрить вредоносный код в выдаваемую 
html-страницу.

Различают несколько типов XSS-атак:
1. Отражённый XSS (Reflected XSS) - это тип атаки, при которой вредоносный 
скрипт передается веб-серверу через параметры URL или формы, а затем возвращается обратно в html-код страницы 
без должной фильтрации или экранирования. Когда пользователь открывает такую страницу, скрипт выполняется 
в его браузере, что может привести к краже данных.
2. Хранимая XSS (Stored XSS) - это тип атаки, при которой вредоносный скрипт сохраняется на сервере, например 
в базе данных, и отображается на веб-страницах. Скрипт выполняется в браузерах других пользователей, 
запрашивающие эти страницы.
3. XSS (Cross-Site Scripting) в DOM-модели - это тип атаки на безопасность, где вредоносный скрипт 
модифицирует DOM-дерево веб-страницы, выполняясь в браузере пользователя. Часто завязан на модификации
URL-строки.

Так как вредоностный скрипт извлекает с помощью JS-кода аутентификационные данные, хранить эти самые данные с
помощью Local Storage - небезопасно, так как для JS-кода в таком случае не существует никаких ограничение на чтение
данных. В случае с Cookie, достаточно установить флаг HttpOnly, запрещающий JS-коду чтение данных из Cookie.

CSRF (Cross-Site Request Forgery) - представляет собой атаку, в которой злоумышленник создает запрос на своем 
веб-сайте, который отправляется от имени авторизованного пользователя на веб-сайте, где пользователь имеет 
активную сессию. Этот запрос может содержать изменение данных и выполнение других вредоностных действий 
на веб-сервере. Запрос отправляется когда пользователь зашёл на веб-сайт злоумышленника.

Хранение в Local Storage этот вид атаки никак не предотвращает. Cookie имеет параметр SameSite, который
контроллирует отправку Cookie для запросов сделанных с других сайтов. 

Существует 3 состояния параметра SameSite:
1. None - прямо указывает, что на передачу cookie-файлов не накладывается никаких ограничений.
2. Lax - разрешает передачу cookie только безопасными HTTP-методами, которыми, согласно RFC 7231, 
являются GET, HEAD, OPTIONS и TRACE.
3. Strict - является самым строгим вариантом безопасности и блокирует отправку cookie с любыми запросами от других
 ресурсов. Cookie будут передаваться только в пределах того домена, с которого они и были установлены.

Таким образом можем заметить, что состояния параметра Lax и Strict защищают пользователя от CSRF-атаки.