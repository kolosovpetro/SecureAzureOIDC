Как уже ранее говорилось, авторизация происходит посредством получения токенов доступа и обновления. Теперь стоит обсудить
как происходит аутентификация на платформе .Net Core. Рассмотрим её на примере диаграммы.

1. Когда пользователь открывает в браузере фронтенд приложение, отправляется запрос на эндпоинт 
https://localhost:4200/api/isAuth, который проверяет куки пользователя и сообщает авторизован ли пользователь или нет.

2. В случае если пользователь авторизован - сервер дает понять это отправляя обратно true, иначе false.

3. В Angular приложение прописана логика, отвечающая за перенаправление пользователя на эндпоинт https://localhost:4200/login
если пользователь не авторизован.

4. В свою очередь метод Login перенаправляет пользователя на ендпоинт авторизации. Важно уточнить, чтобы получить некоторую
информацию о профиле конечного пользователя, мы должны вписать "openid" в scope. Пример:

serviceCollection
    .AddAuthentication(options => {...})
    .AddCookie(CookieAuthenticationDefaults.AuthenticationScheme, options => {...})
    .AddOpenIdConnect(AuthConstants.AppOidc, options =>
    {
        ...
        options.Scope.Add("openid");
    });

5. Если сервер авторизации успешно аутентифицировал пользователя, он перенаправляется на эндпоинт https://localhost:4200,
уже с установленными куки. На этом моменте в дело включается TickerStore, суть которого в управление пользовательскими сессиями.
В базе данных каждая сессия хранится в виде сущности UserSessionEntity. В свойстве Value типа byte[] лежит сериализованный
с помощью объект типа AuthenticationTicket, в котором лежит токен обновления (а так же токен доступа и идентификатор пользователя, коим
является наше свойство Id).

public class UserSessionEntity
{
    public Guid Id { get; private set; }
    public DateTimeOffset CreatedAt { get; set; }
    public DateTimeOffset ExpiresAt { get; set; }
    public DateTimeOffset UpdatedAt { get; set; }
    public DateTimeOffset DateOfLastAccess { get; set; }
    public byte[] Value { get; set; }
}

TickerStore реализует интерфейс ITickerStore, предлагающий реализовать 4 метода: StoreAsync, RenewAsync, RetrieveAsync, RemoveAsync.

Метод StoreAsync выполняется сразу после аутентификации на сервере авторизации, он сохраняет пользовательскую сессию в базе данных.
Метод RenewAsync в нашем случае используется фоновым сервисом RefreshBackgroundService для того чтобы обновлять пользовательские сессии.
Метод RetrieveAsync выполняется каждый раз когда отправляется запрос на эндпоинт помеченный атрибутом [Authorize].
Метод RemoveAsync выполняется когда браузерная кука истекла, а так же используется тем же RefreshBackgroundService для удаление
сессий, которыми давно никто не пользовался.

Пример реализации TickerStore:

public class TicketStore : ITicketStore
{
    private readonly DatabaseContext _context;
    private readonly TicketSerializer _ticketSerializer;
    private readonly HttpClient _httpClient;
    private readonly AzureAdConfiguration _azureAdConfiguration;
    private readonly IMemoryCache _memoryCache;
    private readonly MemoryCacheEntryOptions _memoryCacheEntryOptions;

    public TicketStore(
        DatabaseContext context,
        TicketSerializer ticketSerializer,
        HttpClient httpClient,
        AzureAdConfiguration azureAdConfiguration,
        IMemoryCache memoryCache)
    {
        _context = context;
        _ticketSerializer = ticketSerializer;
        _httpClient = httpClient;
        _azureAdConfiguration = azureAdConfiguration;
        _memoryCache = memoryCache;

        _memoryCacheEntryOptions = new MemoryCacheEntryOptions()
            .SetSlidingExpiration(TimeSpan.FromSeconds(15))
            .SetAbsoluteExpiration(TimeSpan.FromSeconds(100));
    }

    public async Task<string> StoreAsync(AuthenticationTicket ticket)
    {
        var idToken = ticket.Properties.GetTokenValue(TokenTypes.IdentityToken);
        var accessToken = ticket.Properties.GetTokenValue(TokenTypes.AccessToken);
        var refreshToken = ticket.Properties.GetTokenValue(TokenTypes.RefreshToken);

        var handler = new JwtSecurityTokenHandler();
        var decodeToken = handler.ReadToken(idToken) as JwtSecurityToken;
        var ticketExpiresUtc = ticket.Properties.ExpiresUtc;

        if (decodeToken == null)
        {
            throw new StoreException("Read token error");
        }

        if (ticketExpiresUtc.HasValue == false)
        {
            throw new StoreException("Ticket ExpiresUtc value does not exist");
        }

        var sessionId = decodeToken.Claims.First(x => x.Type == ClaimsConstants.Sid).Value;
        var userSession = await _context.UserSessions.FirstOrDefaultAsync(x => x.Id == new Guid(sessionId));

        if (userSession != null)
        {
            var deserializedTicket = _ticketSerializer.Deserialize(userSession.Value);

            if (deserializedTicket == null)
            {
                throw new StoreException("Deserialization ticket error");
            }

            if (accessToken == null || refreshToken == null || idToken == null)
            {
                throw new StoreException("Access token, refresh token, identity token are not existing");
            }

            deserializedTicket.Properties.UpdateTokenValue(TokenTypes.AccessToken, accessToken);
            deserializedTicket.Properties.UpdateTokenValue(TokenTypes.RefreshToken, refreshToken);
            deserializedTicket.Properties.UpdateTokenValue(TokenTypes.IdentityToken, idToken);

            var serializedTicket = _ticketSerializer.Serialize(deserializedTicket);

            userSession.UpdateValue(serializedTicket);
            userSession.UpdateExpiresAt(ticketExpiresUtc.Value);

            _context.UserSessions.Update(userSession);
            await _context.SaveChangesAsync();

            _memoryCache.Set(sessionId, ticket, _memoryCacheEntryOptions);
        }

        if (userSession == null)
        {
            var serializedTicket = _ticketSerializer.Serialize(ticket);

            var newUserSession = new UserSessionEntity(new Guid(sessionId), ticketExpiresUtc.Value, serializedTicket);

            _context.UserSessions.Add(newUserSession);
            await _context.SaveChangesAsync();

            _memoryCache.Set(sessionId, ticket, _memoryCacheEntryOptions);
        }

        return sessionId;
    }

    public async Task RenewAsync(string key, AuthenticationTicket authenticationTicket)
    {
        var userSession = await _context.UserSessions.FirstOrDefaultAsync(x => x.Id == new Guid(key));

        if (userSession == null)
        {
            throw new StoreException("UserSession does not exist");
        }

        var deserializedTicket = _ticketSerializer.Deserialize(userSession.Value);

        if (deserializedTicket == null)
        {
            throw new StoreException("Deserialization ticket error");
        }

        var refreshToken = deserializedTicket.Properties.GetTokenValue(TokenTypes.RefreshToken);

        var response = await RequestRefreshTokenAsync(refreshToken);

        if (response.AccessToken == null || response.RefreshToken == null || response.IdentityToken == null)
        {
            await RemoveAsync(key);
            return;
        }

        deserializedTicket.Properties.UpdateTokenValue(TokenTypes.AccessToken, response.AccessToken);
        deserializedTicket.Properties.UpdateTokenValue(TokenTypes.RefreshToken, response.RefreshToken);
        deserializedTicket.Properties.UpdateTokenValue(TokenTypes.IdentityToken, response.IdentityToken);

        var serializedTicket = _ticketSerializer.Serialize(deserializedTicket);

        userSession.UpdateValue(serializedTicket);
        userSession.UpdateExpiresAt(userSession.ExpiresAt.AddSeconds(response.ExpiresIn));

        _context.UserSessions.Update(userSession);
        await _context.SaveChangesAsync();
    }

    public async Task<AuthenticationTicket> RetrieveAsync(string key)
    {
        var isMemoryCacheTicketExist = _memoryCache.TryGetValue(key, out AuthenticationTicket memoryCacheTicket);

        if (isMemoryCacheTicketExist)
        {
            return memoryCacheTicket;
        }

        var userSession = await _context.UserSessions.AsNoTracking().FirstOrDefaultAsync(x => x.Id == new Guid(key));

        if (userSession == null)
        {
            return null;
        }

        var deserializedTicket = _ticketSerializer.Deserialize(userSession.Value);

        if (deserializedTicket == null)
        {
            throw new StoreException("Deserialization ticket error");
        }

        if (DateTimeOffset.UtcNow > userSession.ExpiresAt)
        {
            var refreshToken = deserializedTicket.Properties.GetTokenValue(TokenTypes.RefreshToken);

            if (refreshToken == null)
            {
                throw new StoreException("Refresh token does not exist");
            }

            var response = await RequestRefreshTokenAsync(refreshToken);

            if (response.AccessToken == null || response.RefreshToken == null || response.IdentityToken == null)
            {
                await RemoveAsync(key);
                return null;
            }

            deserializedTicket.Properties.UpdateTokenValue(TokenTypes.AccessToken, response.AccessToken);
            deserializedTicket.Properties.UpdateTokenValue(TokenTypes.RefreshToken, response.RefreshToken);
            deserializedTicket.Properties.UpdateTokenValue(TokenTypes.IdentityToken, response.IdentityToken);

            var serializedTicket = _ticketSerializer.Serialize(deserializedTicket);

            userSession.UpdateValue(serializedTicket);
            userSession.UpdateExpiresAt(DateTimeOffset.UtcNow.AddSeconds(response.ExpiresIn));
        }

        userSession.UpdateDateOfLastAccess();
        _context.UserSessions.Update(userSession);

        await _context.SaveChangesAsync();

        _memoryCache.Set(key, deserializedTicket, _memoryCacheEntryOptions);

        return deserializedTicket;
    }

    public async Task RemoveAsync(string key)
    {
        var userSession = await _context.UserSessions.FirstAsync(x => x.Id == new Guid(key));

        if (userSession == null) return;

        _context.UserSessions.Remove(userSession);
        await _context.SaveChangesAsync();
    }

    private async Task<TokenResponse> RequestRefreshTokenAsync(string refreshToken)
    {
        var refreshTokenRequest = new RefreshTokenRequest
        {
            Address = _azureAdConfiguration.AzureAdTokenUrl,
            ClientId = _azureAdConfiguration.ClientId.ToString(),
            ClientSecret = _azureAdConfiguration.ClientSecret,
            GrantType = GrantType.RefreshToken,
            Scope = _azureAdConfiguration.Scopes,
            RefreshToken = refreshToken
        };

        var response = await _httpClient.RequestRefreshTokenAsync(refreshTokenRequest);

        return response;
    }
}

Ниже метод расширения, конфигурирующий TickerStore:

public static class TicketStoreDependencyInjection
{
    public static IServiceCollection AddTicketStore(this IServiceCollection serviceCollection)
    {
        var serviceProvider = serviceCollection.BuildServiceProvider();

        var configuration = serviceProvider.GetService<IConfiguration>();
        var dbContext = serviceProvider.GetService<DatabaseContext>();
        var ticketSerializer = new TicketSerializer();
        var httpClient = new HttpClient();
        var memoryCache = serviceProvider.GetService<IMemoryCache>();

        var azAdSection = configuration.GetSection(AppSettingsConstants.AzureAdSelection);
        var azureAdConfiguration = azAdSection.Get<AzureAdConfiguration>();
        var adClientSecret = Environment.GetEnvironmentVariable(AppSettingsConstants.AdSecretKey);
        azureAdConfiguration.ClientSecret = adClientSecret;

        var ticketStore = new TicketStore(dbContext, ticketSerializer, httpClient, azureAdConfiguration, memoryCache);

        serviceCollection.AddSingleton<ITicketStore, TicketStore>(_ => ticketStore);
        serviceCollection
            .AddOptions<CookieAuthenticationOptions>(CookieAuthenticationDefaults.AuthenticationScheme)
            .Configure<ITicketStore>((o, _) => o.SessionStore = ticketStore);

        return serviceCollection;
    }
}

Далее в Program.cs вызываем метод расширения:

builder.Services.AddTicketStore();

6. Повторяем шаг 1, на этот раз сервер должен сообщить что пользователь авторизован.

7. Angular приложение отправляет запрос на эндпоинт https://localhost:4200/api/OtherApi1/products.

8. Библиотека YARP берет токен доступа из куки и кладет его в заголовок, после чего перенаправляет запрос на один из микросервисов.

Ниже метод расширения, конфигурирующий YARP:

public static class YarpServices
{
    public static IServiceCollection ConfigureYarp(
        this IServiceCollection serviceCollection,
        IConfigurationSection reverseProxySection)
    {
        serviceCollection
            .AddReverseProxy()
            .LoadFromConfig(reverseProxySection)
            .AddTransforms(transformBuilderContext =>
            {
                transformBuilderContext.AddRequestTransform(async transformContext =>
                {
                    var authenticateResult = await transformContext.HttpContext.AuthenticateAsync(AuthConstants.AppOidc);
                    var accessToken = authenticateResult.Properties?.GetTokenValue(TokenTypes.AccessToken);
                    transformContext.ProxyRequest.Headers.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);
                });
            });

        return serviceCollection;
    }
}

Вызываем метод расширения в Program.cs:

var reverseProxySection = builder.Configuration.GetSection(AppSettingsConstants.ReverseProxySelection);

builder.Services.ConfigureYarp(reverseProxySection);

Пример секции YARP в appsettings.json:

"ReverseProxy": {
    "Routes": {
      "route1" : {
        "ClusterId": "cluster1",
        "Match": {
          "Path": "/sender/{**catch-all}"
        },
        "Transforms": [
          {
            "PathRemovePrefix": "/sender"
          }
        ]
      }
    },
    "Clusters": {
      "cluster1": {
        "Destinations": {
          "destination1": {
            "Address": "https://localhost:7002"
          }
        }
      }
    }
  }

9. Если приходит код 401, повторяем флоу заного.