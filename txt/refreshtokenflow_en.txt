====Refresh token flow====

The implementation of refreshing user tokens is extremely simple. We need to create a background service, which every few minutes 
will select from the database those sessions that are about to expire, then the background service should deserialize 
the AuthenticationTicket object of each found session, from the deserialized object the service will take the refresh token and 
send a request to the authorization server in order to get new access tokens and refresh tokens. The new tokens replace the old tokens 
in the AuthenticationTicket object, after which the object must be deserialized again and set the already deserialized object to 
the Value property. In addition, the authentication server response will have a number in the ExpiresIn field that tells you in 
how much time (in seconds) the access token will expire, the background service must update the ExpiresAt property of 
the UserSessionEntity object by adding the seconds received to the current time.

In addition to refreshing user sessions, the background service is responsible for deleting sessions that have not been used for a long time. 
Every few minutes, sessions are selected, their DateOfLastAccess property is compared to the current time, if the difference between 
the two dates is more than 3 days - the session is deleted. Each time a user performs an action on the site, 
the DateOfLastAccess property is updated.

Implementation of a background service:

public class RefreshBackgroundService : IHostedService
{
    private readonly DatabaseContext _context;
    private readonly TicketStore _ticketStore;

    public RefreshBackgroundService(DatabaseContext context, TicketStore ticketStore)
    {
        _context = context;
        _ticketStore = ticketStore;
    }

    public Task StartAsync(CancellationToken cancellationToken)
    {
        var _ = StartRefreshingUserSessionsAsync(cancellationToken);

        return Task.CompletedTask;
    }

    public Task StopAsync(CancellationToken cancellationToken)
    {
        return Task.CompletedTask;
    }

    private async Task StartRefreshingUserSessionsAsync(CancellationToken cancellationToken)
    {
        while (!cancellationToken.IsCancellationRequested)
        {
            var expiringUserSessions = await _context.UserSessions
                .Where(x => (x.ExpiresAt > DateTimeOffset.UtcNow &&
                             x.ExpiresAt < DateTimeOffset.UtcNow.AddMinutes(5)) ||
                            x.ExpiresAt < DateTimeOffset.UtcNow)
                .ToListAsync(cancellationToken);

            foreach (var userSession in expiringUserSessions)
            {
                var differenceBetweenLastAccessAndUtcNow = userSession.DateOfLastAccess
                    .Subtract(DateTimeOffset.UtcNow)
                    .Duration();
                
                if (differenceBetweenLastAccessAndUtcNow > TimeSpan.FromDays(3))
                {
                    await _ticketStore.RemoveAsync(userSession.Id.ToString());
                    continue;
                }
                
                await _ticketStore.RenewAsync(userSession.Id.ToString(), null);
            }

            await Task.Delay(TimeSpan.FromMinutes(10), cancellationToken);
        }
    }
}

The extension method that configures a background service:

public static class HostedServicesDependencyInjection
{
    public static IServiceCollection AddHostedServices(this IServiceCollection serviceCollection)
    {
        var serviceProvider = serviceCollection.BuildServiceProvider();
        
        var configuration = serviceProvider.GetService<IConfiguration>();
        var databaseContext = serviceProvider.GetService<DatabaseContext>();
        var memoryCache = serviceProvider.GetService<IMemoryCache>();
        
        var tickerSerializer = new TicketSerializer();
        var httpClient = new HttpClient();
        
        var azAdSection = configuration.GetSection(AppSettingsConstants.AzureAdSelection);
        var azureAdConfiguration = azAdSection.Get<AzureAdConfiguration>();
        var adClientSecret = Environment.GetEnvironmentVariable(AppSettingsConstants.AdSecretKey);
        azureAdConfiguration.ClientSecret = adClientSecret;

        var tickerStore = new TicketStore(
            databaseContext,
            tickerSerializer,
            httpClient,
            azureAdConfiguration,
            memoryCache);

        var refreshBackgroundService = new RefreshBackgroundService(databaseContext, tickerStore);

        serviceCollection.AddHostedService(_ => refreshBackgroundService);
        
        return serviceCollection;
    }
}

Calling the extension method in Program.cs:

builder.Services.AddHostedServices();