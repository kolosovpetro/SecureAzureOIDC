Consider a more practical approach that takes all the previously discussed aspects.
Applying modern frameworks like ASP .NET Core, Angular etc. let be the following authentication flow



1. When the user opens a frontend application in the browser, a request is sent to the endpoint https://localhost:4200/api/isAuth, 
which checks the user's cookies and informs whether the user is authorized or not.

2. If the user is authorized - the server lets you know this by sending back true, otherwise false.

3. In the Angular application, there is logic responsible for redirecting the user to the endpoint https://localhost:4200/login 
if the user is not authorized.

4. In turn, the Login method redirects the user to the authorization endpoint. It is important to clarify that in order to get some 
information about the profile of the end user, we have to put "openid" in scope. Example:

serviceCollection
    .AddAuthentication(options => {...})
    .AddCookie(CookieAuthenticationDefaults.AuthenticationScheme, options => {...})
    .AddOpenIdConnect(AuthConstants.AppOidc, options =>
    {
        ...
        options.Scope.Add("openid");
    });

5. If the authentication server has successfully authenticated the user, he is redirected to the endpoint https://localhost:4200, with 
cookies already set. At this point, the TickerStore comes into play, which is all about managing user sessions. In the database, each 
session is stored as a UserSessionEntity entity. The Value property of byte[] type contains serialized AuthenticationTicket object, 
which contains refresh token (as well as access token and user ID, which is our Id property).

public class UserSessionEntity
{
    public Guid Id { get; private set; }
    public DateTimeOffset CreatedAt { get; set; }
    public DateTimeOffset ExpiresAt { get; set; }
    public DateTimeOffset UpdatedAt { get; set; }
    public DateTimeOffset DateOfLastAccess { get; set; }
    public byte[] Value { get; set; }
}

TickerStore implements ITickerStore interface, which offers 4 methods: StoreAsync, RenewAsync, RetrieveAsync, RemoveAsync.

The StoreAsync method is executed immediately after authentication on the authentication server, it saves the user session in the database.
The RenewAsync method in our case is used by the background service RefreshBackgroundService to update user sessions.
The RetrieveAsync method is executed every time a request is sent to the endpoint marked with the [Authorize] attribute.
The RemoveAsync method is executed when the browser cookie has expired, as well as is used by the same RefreshBackgroundService 
to remove sessions which have not been used for a long time.

Example TickerStore implementation:

public class TicketStore : ITicketStore
{
    private readonly DatabaseContext _context;
    private readonly TicketSerializer _ticketSerializer;
    private readonly HttpClient _httpClient;
    private readonly AzureAdConfiguration _azureAdConfiguration;
    private readonly IMemoryCache _memoryCache;
    private readonly MemoryCacheEntryOptions _memoryCacheEntryOptions;

    public TicketStore(
        DatabaseContext context,
        TicketSerializer ticketSerializer,
        HttpClient httpClient,
        AzureAdConfiguration azureAdConfiguration,
        IMemoryCache memoryCache)
    {
        _context = context;
        _ticketSerializer = ticketSerializer;
        _httpClient = httpClient;
        _azureAdConfiguration = azureAdConfiguration;
        _memoryCache = memoryCache;

        _memoryCacheEntryOptions = new MemoryCacheEntryOptions()
            .SetSlidingExpiration(TimeSpan.FromSeconds(15))
            .SetAbsoluteExpiration(TimeSpan.FromSeconds(100));
    }

    public async Task<string> StoreAsync(AuthenticationTicket ticket)
    {
        var idToken = ticket.Properties.GetTokenValue(TokenTypes.IdentityToken);
        var accessToken = ticket.Properties.GetTokenValue(TokenTypes.AccessToken);
        var refreshToken = ticket.Properties.GetTokenValue(TokenTypes.RefreshToken);
        
        var handler = new JwtSecurityTokenHandler();
        var decodeToken = handler.ReadToken(idToken) as JwtSecurityToken;
        var ticketExpiresUtc = ticket.Properties.ExpiresUtc;
        
        if (decodeToken == null)
        {
            throw new StoreException("Read token error");
        }
        
        if (ticketExpiresUtc.HasValue == false)
        {
            throw new StoreException("Ticket ExpiresUtc value does not exist");
        }
        
        var sessionId = decodeToken.Claims.First(x => x.Type == ClaimsConstants.Sid).Value;
        var userSession = await _context.UserSessions.FirstOrDefaultAsync(x => x.Id == new Guid(sessionId));

        if (userSession != null)
        {
            var deserializedTicket = _ticketSerializer.Deserialize(userSession.Value);
            
            if (deserializedTicket == null)
            {
                throw new StoreException("Deserialization ticket error");
            }
            
            if (accessToken == null || refreshToken == null || idToken == null)
            {
                throw new StoreException("Access token, refresh token, identity token are not existing");
            }
            
            deserializedTicket.Properties.UpdateTokenValue(TokenTypes.AccessToken, accessToken);
            deserializedTicket.Properties.UpdateTokenValue(TokenTypes.RefreshToken, refreshToken);
            deserializedTicket.Properties.UpdateTokenValue(TokenTypes.IdentityToken, idToken);

            var serializedTicket = _ticketSerializer.Serialize(deserializedTicket);

            userSession.UpdateValue(serializedTicket);
            userSession.UpdateExpiresAt(ticketExpiresUtc.Value);

            _context.UserSessions.Update(userSession);
            await _context.SaveChangesAsync();
            
            _memoryCache.Set(sessionId, ticket, _memoryCacheEntryOptions);
        }
        
        if (userSession == null)
        {
            var serializedTicket = _ticketSerializer.Serialize(ticket);
            
            var newUserSession = new UserSessionEntity(new Guid(sessionId), ticketExpiresUtc.Value, serializedTicket);

            _context.UserSessions.Add(newUserSession);
            await _context.SaveChangesAsync();
            
            _memoryCache.Set(sessionId, ticket, _memoryCacheEntryOptions);
        }
        
        return sessionId;
    }

    public async Task RenewAsync(string key, AuthenticationTicket authenticationTicket)
    {
        var userSession = await _context.UserSessions.FirstOrDefaultAsync(x => x.Id == new Guid(key));

        if (userSession == null)
        {
            throw new StoreException("UserSession does not exist");
        }
        
        var deserializedTicket = _ticketSerializer.Deserialize(userSession.Value);

        if (deserializedTicket == null)
        {
            throw new StoreException("Deserialization ticket error");
        }
        
        var refreshToken = deserializedTicket.Properties.GetTokenValue(TokenTypes.RefreshToken);

        var response = await RequestRefreshTokenAsync(refreshToken);
            
        if (response.AccessToken == null || response.RefreshToken == null || response.IdentityToken == null)
        {
            await RemoveAsync(key);
            return;
        }
            
        deserializedTicket.Properties.UpdateTokenValue(TokenTypes.AccessToken, response.AccessToken);
        deserializedTicket.Properties.UpdateTokenValue(TokenTypes.RefreshToken, response.RefreshToken);
        deserializedTicket.Properties.UpdateTokenValue(TokenTypes.IdentityToken, response.IdentityToken);
            
        var serializedTicket = _ticketSerializer.Serialize(deserializedTicket);
            
        userSession.UpdateValue(serializedTicket);
        userSession.UpdateExpiresAt(userSession.ExpiresAt.AddSeconds(response.ExpiresIn));
            
        _context.UserSessions.Update(userSession);
        await _context.SaveChangesAsync();
    }

    public async Task<AuthenticationTicket> RetrieveAsync(string key)
    {
        var isMemoryCacheTicketExist = _memoryCache.TryGetValue(key, out AuthenticationTicket memoryCacheTicket);
        
        if (isMemoryCacheTicketExist)
        {
            return memoryCacheTicket;
        }
        
        var userSession = await _context.UserSessions.AsNoTracking().FirstOrDefaultAsync(x => x.Id == new Guid(key));

        if (userSession == null)
        {
            return null;
        }

        var deserializedTicket = _ticketSerializer.Deserialize(userSession.Value);
        
        if (deserializedTicket == null)
        {
            throw new StoreException("Deserialization ticket error");
        }

        if (DateTimeOffset.UtcNow > userSession.ExpiresAt)
        {
            var refreshToken = deserializedTicket.Properties.GetTokenValue(TokenTypes.RefreshToken);

            if (refreshToken == null)
            {
                throw new StoreException("Refresh token does not exist");
            }
            
            var response = await RequestRefreshTokenAsync(refreshToken);

            if (response.AccessToken == null || response.RefreshToken == null || response.IdentityToken == null)
            {
                await RemoveAsync(key);
                return null;
            }
            
            deserializedTicket.Properties.UpdateTokenValue(TokenTypes.AccessToken, response.AccessToken);
            deserializedTicket.Properties.UpdateTokenValue(TokenTypes.RefreshToken, response.RefreshToken);
            deserializedTicket.Properties.UpdateTokenValue(TokenTypes.IdentityToken, response.IdentityToken);
            
            var serializedTicket = _ticketSerializer.Serialize(deserializedTicket);
        
            userSession.UpdateValue(serializedTicket);
            userSession.UpdateExpiresAt(DateTimeOffset.UtcNow.AddSeconds(response.ExpiresIn));
        }
        
        userSession.UpdateDateOfLastAccess();
        _context.UserSessions.Update(userSession);
        
        await _context.SaveChangesAsync();
            
        _memoryCache.Set(key, deserializedTicket, _memoryCacheEntryOptions);
        
        return deserializedTicket;
    }

    public async Task RemoveAsync(string key)
    {
        var userSession = await _context.UserSessions.FirstAsync(x => x.Id == new Guid(key));
        
        if (userSession == null) return;
        
        _context.UserSessions.Remove(userSession);
        await _context.SaveChangesAsync();
    }

    private async Task<TokenResponse> RequestRefreshTokenAsync(string refreshToken)
    {
        var refreshTokenRequest = new RefreshTokenRequest
        {
            Address = _azureAdConfiguration.AzureAdTokenUrl,
            ClientId = _azureAdConfiguration.ClientId.ToString(),
            ClientSecret = _azureAdConfiguration.ClientSecret,
            GrantType = GrantType.RefreshToken,
            Scope = _azureAdConfiguration.Scopes,
            RefreshToken = refreshToken
        };
        
        var response = await _httpClient.RequestRefreshTokenAsync(refreshTokenRequest);

        return response;
    }
}

Below is the extension method that configures the TickerStore:

public static class TicketStoreDependencyInjection
{
    public static IServiceCollection AddTicketStore(this IServiceCollection serviceCollection)
    {
        var serviceProvider = serviceCollection.BuildServiceProvider();
        
        var configuration = serviceProvider.GetService<IConfiguration>();
        var dbContext = serviceProvider.GetService<DatabaseContext>();
        var ticketSerializer = new TicketSerializer();
        var httpClient = new HttpClient();
        var memoryCache = serviceProvider.GetService<IMemoryCache>();
        
        var azAdSection = configuration.GetSection(AppSettingsConstants.AzureAdSelection);
        var azureAdConfiguration = azAdSection.Get<AzureAdConfiguration>();
        var adClientSecret = Environment.GetEnvironmentVariable(AppSettingsConstants.AdSecretKey);
        azureAdConfiguration.ClientSecret = adClientSecret;
        
        var ticketStore = new TicketStore(dbContext, ticketSerializer, httpClient, azureAdConfiguration, memoryCache);
        
        serviceCollection.AddSingleton<ITicketStore, TicketStore>(_ => ticketStore);
        serviceCollection
            .AddOptions<CookieAuthenticationOptions>(CookieAuthenticationDefaults.AuthenticationScheme)
            .Configure<ITicketStore>((o, _) => o.SessionStore = ticketStore);

        return serviceCollection;
    }
}

Then we call the extension method in Program.cs:

builder.Services.AddTicketStore();

6. Repeat step 1, this time the server should inform you that the user is authorized.

7. Angular application sends request to endpoint https://localhost:4200/api/OtherApi1/products

8. The YARP library takes the access token from the cookie and puts it in the header, then redirects the request to one of the microservices.

Below is the extension method that configures YARP:

public static class YarpServices
{
    public static IServiceCollection ConfigureYarp(
        this IServiceCollection serviceCollection,
        IConfigurationSection reverseProxySection)
    {
        serviceCollection
            .AddReverseProxy()
            .LoadFromConfig(reverseProxySection)
            .AddTransforms(transformBuilderContext =>
            {
                transformBuilderContext.AddRequestTransform(async transformContext =>
                {
                    var authenticateResult = await transformContext.HttpContext.AuthenticateAsync(AuthConstants.AppOidc);
                    var accessToken = authenticateResult.Properties?.GetTokenValue(TokenTypes.AccessToken);
                    transformContext.ProxyRequest.Headers.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);
                });
            });

        return serviceCollection;
    }
}

Then we call the extension method in Program.cs:

var reverseProxySection = builder.Configuration.GetSection(AppSettingsConstants.ReverseProxySelection);

builder.Services.ConfigureYarp(reverseProxySection);

Example reverse proxy (YARP) selection in appsettings.json:

"ReverseProxy": {
    "Routes": {
      "route1" : {
        "ClusterId": "cluster1",
        "Match": {
          "Path": "/sender/{**catch-all}"
        },
        "Transforms": [
          {
            "PathRemovePrefix": "/sender"
          }
        ]
      }
    },
    "Clusters": {
      "cluster1": {
        "Destinations": {
          "destination1": {
            "Address": "https://localhost:7002"
          }
        }
      }
    }
  }

9. If the code 401 comes, repeat the flow again.