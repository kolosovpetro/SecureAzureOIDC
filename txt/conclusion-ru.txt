Заключение.

В данной статье была рассмотрена проблема безопасного хранения и передачи токенов доступа между микросервисами.
Особое внимание было уделено возможным уязвимостям таким как Cross-Site Scripting (XSS) и Cross-Site Request Forgery (CSRF).

Для устранения данных уязвимостей необходимо хранить авторизационные токены в файлах cookie, с обязательными
настройками HttpOnly и SameSite так что значения SameSite должны быть Lax или Strict,
таким образом файлы куки передаются либо на безопасные ХТТП методы, либо не передаются вовсе.

Аутентификация пользователя происходит по протоколу Open ID Connect (link to RFC) через Authorization code flow with PKCE (link to RFC).
Подробнее принцип работы протокола Open ID Connect и Authorization code flow with PKCE изложен во главе 2.

Так же в работе был предложен механизм аутентификации/авторизации основанный на ASP.NET Web API бекенде и Angular фронтенд приложении
под единым доменом. Таким образом исключается необходимость передачи авторизационных куки на ресурсы под другими доменами.
Передача токена доступа на микросервисы происходит по средствам Reverse Proxy YARP (link to docs), таким образом что
токен доступа автоматически подставляется в заголовок запроса.

Кроме этого, в работе был предложен механизм обновления токена доступа через реализацию Ticket Store (link to docs) и Hosted Service (link to docs).
Таким образом, Ticket Store отвечает за проверку каждого запроса на истечение срока действия токена доступа.
В случае истечения срока действия токена доступа, токен доступа обновляется с помощью запроса к эндпоинту сервиса авторизации.
Также задача Ticket Store состоит в сохранении токена доступа и токена обновления,
которые являются частью Authentication Ticket.
Hosted Service необходим для фонового обновления истекающих токенов доступа, чтобы поддерживать сессии пользователей активными.

В статье мы решили проблему безопасного хранения токена доступа и передачи его между микросервисами,
а так же предложили решения выявленным уязвимостям вида Cross-Site Scripting (XSS) и Cross-Site Request Forgery (CSRF).