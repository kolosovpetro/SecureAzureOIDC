====Refresh token flow====

В базе данных каждая сессия хранится в виде сущности UserSessionEntity. В свойстве Value типа byte[] лежит сериализованный
с помощью 
объект типа AuthenticationTicket, в котором лежит токен обновления (а так же токен доступа и идентификатор пользователя, коим
является наше свойство Id).

public class UserSessionEntity
{
    public Guid Id { get; private set; }
    public DateTimeOffset CreatedAt { get; set; }
    public DateTimeOffset ExpiresAt { get; set; }
    public DateTimeOffset UpdatedAt { get; set; }
    public DateTimeOffset DateOfLastAccess { get; set; }
    public byte[] Value { get; set; }
}

Реализация обновления токенов пользователей крайне проста. Нам нужно создать фоновый сервис, который будет каждые несколько
минут выбирать из базы данных те сессии, которые скоро истекут, затем фоновый сервис должен десериализовать объект 
AuthenticationTicket у каждой найденой найденой сессии, из десериализованного объекта сервис возьмет токен обновления и отправит
запрос на сервер авторизации с целью получения новых токенов доступа и обновления. Новые токены заменяют старые в объекте AuthenticationTicket,
после чего объект нужно заного десериализовать и установить уже десериализованный объект в свойство Value. Кроме того, в ответе 
авторизационного сервера в поле ExpiresIn будет число, которое говорит о том через какое время (в секундах) истечет токен доступа, фоновый 
сервис должен обновить свойство ExpiresAt у объекта UserSessionEntity, добавив к текущему времени полученные секунды.

Помимо обновления пользовательских сессий, фоновый сервис отвечает за удалений сессий, которые долго не использовались.
Каждые несколько минут выбираются сессии, их свойства DateOfLastAccess сравнивается с текущем временем, в случае если разница
между двумя датами больше 3 суток - сессия удаляется. Каждый раз когда пользователь совершает действие на сайте, свойство 
DateOfLastAccess обновляется.